import dotenv from "dotenv";
import { noCdnClient } from "../../sanity/sanity.server";
import { getCssRoot, getGlobalTokenValue, readCss } from "../handle-css";

dotenv.config();

type TokenEntryT = {
  title: string;
  token: string;
};

export const generateTokens = (root): TokenEntryT[] =>
  root.declarations.map((d) => ({
    title: d.property.replace("--navds-", ""),
    token: d.value,
    ...(d.value.includes("var(") && {
      raw: getGlobalTokenValue(d.value, root),
    }),
    ...(d.value.startsWith("var(") && {
      parent: d.value.replace("var(", "").replace(")", "").replace(";", ""),
    }),
  }));

export const updateTokens = async () => {
  const token = process.env.SANITY_WRITE_KEY;

  // this is our transactional client, it won't push anything until we say .commit() later
  const transactionClient = noCdnClient(token).transaction();

  // first let's fetch the current state from sanity,
  // So that we can delete old/changed tokens
  const remoteTokens = await noCdnClient(token).fetch(
    `*[_type == "ds_tokens"]`
  );

  const tokens = generateTokens(getCssRoot(readCss()));

  for (const token of remoteTokens) {
    if (
      !tokens.find(
        (x) => token._id === `${x.title.split("-").join("_")}_autogen_token`
      )
    )
      transactionClient.delete(token._id);
  }

  tokens.forEach((c) =>
    transactionClient.createOrReplace({
      _id: `${c.title.split("-").join("_")}_autogen_token`,
      _type: "ds_tokens",
      autogenerated: true,
      ...(remoteTokens.find((x) => x.title === c.title) && {
        beskrivelse:
          remoteTokens.find((x) => x.title === c.title)?.beskrivelse ?? "",
      }),
      ...c,
    })
  );

  await transactionClient
    .commit()
    .then(() => console.log(`Updated tokens`))
    .catch((e) => console.error(e.message));
};
