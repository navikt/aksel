import * as PT from 'prop-types';
import * as React from 'react';
import * as classNames from 'classnames';
import { omit } from 'nav-frontend-js-utils';
import 'nav-frontend-knapper-style'; // eslint-disable-line import/extensions

import { KnappProps } from './knapp';


export const cls = (props: (KnappBaseProps & KnappProps)) => classNames('knapp', props.className, {
    'knapp--hoved': props.type === 'hoved',
    'knapp--fare': props.type === 'fare',
    'knapp--standard': props.type === 'standard',
    'knapp--mini': props.mini,
    // eslint-disable-next-line no-use-before-define
    'knapp--disabled': props.disabled,
    'knapp--spinner': props.spinner
});

function skalVareDisabled(props) {
    if (props.autoDisableVedSpinner) { // eslint-disable-line no-use-before-define
        return props.disabled || props.spinner;
    }
    return props.disabled;
}

export interface KnappBaseProps extends KnappProps {
    type: 'standard' | 'hoved' | 'fare'
}

/**
 *  Knapp, Hovedknapp og Fareknapp arver alle fra KnappBase, og har da samme props.
 *  Unntaket er `type` som blir satt av de respektive underklassene.
 */
class KnappBase extends React.Component<KnappBaseProps> { // eslint-disable-line react/prefer-stateless-function
    render() {
        const { children, className, ...props } = this.props;

        const spinner = props.spinner ? <span className="knapp__spinner" /> : null;
        const ariaLabel = props.spinner ? { 'aria-label': 'Laster' } : {};
        const disabled = skalVareDisabled(props);
        const type = props.htmlType;
        const domProps = omit(
            { ...props, disabled, type },
            'htmlType',
            'mini',
            'spinner',
            'autoDisableVedSpinner',
            'inaktivKlasseVedDisabled'
        );

        return (
            <button className={cls(this.props)} {...domProps} {...ariaLabel}>
                {children}
                {spinner}
            </button>
        );
    }
}

(KnappBase as any).defaultProps = {
    autoDisableVedSpinner: false,
    inaktivKlasseVedDisabled: false,
    className: null,
    htmlType: 'submit',
    mini: false,
    disabled: false,
    spinner: false
};

(KnappBase as any).propTypes = {
    children: PT.node.isRequired,
    className: PT.string,
    type: PT.oneOf(['standard', 'hoved', 'fare']).isRequired,
    htmlType: PT.oneOf(['submit', 'button', 'reset']),
    mini: PT.bool,
    disabled: PT.bool,
    spinner: PT.bool,
    autoDisableVedSpinner: PT.bool,
    inaktivKlasseVedDisabled: PT.bool
};

export default KnappBase;

export { default as Knapp } from './knapp';
export { default as Hovedknapp } from './hovedknapp';
export { default as Fareknapp } from './fareknapp';
