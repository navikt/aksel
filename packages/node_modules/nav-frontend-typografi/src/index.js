import PT from 'prop-types';
import React, { Component } from 'react';
import classNames from 'classnames';
import 'nav-frontend-typografi-style'; // eslint-disable-line import/extensions

export const typeConfigMap = {
    sidetittel: { defaultTag: 'h1', cls: (...args) => classNames('typo-sidetittel', ...args) },
    innholdstittel: { defaultTag: 'h1', cls: (...args) => classNames('typo-innholdstittel', ...args) },
    systemtittel: { defaultTag: 'h2', cls: (...args) => classNames('typo-systemtittel', ...args) },
    undertittel: { defaultTag: 'h2', cls: (...args) => classNames('typo-undertittel', ...args) },
    element: { defaultTag: 'p', cls: (...args) => classNames('typo-element', ...args) },
    etikettLiten: { defaultTag: 'p', cls: (...args) => classNames('typo-etikett-liten', ...args) },
    avsnitt: { defaultTag: 'p', cls: (...args) => classNames('typo-avsnitt', ...args) },
    undertekst: { defaultTag: 'p', cls: (...args) => classNames('typo-undertekst', ...args) },
    infotekst: { defaultTag: 'p', cls: (...args) => classNames('typo-infotekst', ...args) },
    normaltekst: { defaultTag: 'p', cls: (...args) => classNames('typo-normal', ...args) }
};

function getConfigForType(type) {
    const typeConfig = typeConfigMap[type];

    if (!typeConfig) {
        throw new Error(
            `Kunne ikke finne typeconfig for ${type}. St√∏ttede typer er: ${JSON.stringify(Object.keys(typeConfigMap))}`
        );
    }

    return typeConfig;
}

class TypografiBase extends Component { // eslint-disable-line react/prefer-stateless-function
    render() {
        const { type, tag, className, children, ...props } = this.props;
        const config = getConfigForType(type);
        const tagName = tag || config.defaultTag;

        const classnames = { className: config.cls(className) };

        return React.createElement(tagName, { ...props, ...classnames }, children);
    }
}

TypografiBase.propTypes = {
    type: PT.string.isRequired,
    tag: PT.string, // eslint-disable-line react/require-default-props
    className: PT.string,
    children: PT.node.isRequired
};
TypografiBase.defaultProps = {
    className: undefined
};

export default TypografiBase;

export { default as Sidetittel } from './sidetittel';
export { default as Innholdstittel } from './innholdstittel';
export { default as Undertittel } from './undertittel';
export { default as Systemtittel } from './systemtittel';
export { default as Element } from './element';
export { default as EtikettLiten } from './etikett-liten';
export { default as Avsnitt } from './avsnitt';
export { default as Undertekst } from './undertekst';
export { default as Infotekst } from './infotekst';
export { default as Normaltekst } from './normaltekst';
