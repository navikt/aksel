import * as React from 'react';
import * as PT from 'prop-types';
import * as classNames from 'classnames';
import { SkjemaGruppe, Fieldset } from './';
import { skjemaelementFeilmeldingShape } from './skjemaelement-feilmelding';

import 'nav-frontend-skjema-style';

export interface RadioProps {
    label?: string;
    value: string;
    disabled?: boolean;
    inputProps?: React.InputHTMLAttributes<HTMLInputElement>;
}

export interface FeilProps {
    feilmelding: React.ReactNode | React.ReactChild | React.ReactChildren;
}

export interface RadioPanelGruppeProps {
    radios: RadioProps[];
    name: string;
    legend: string;
    onChange: (event: React.SyntheticEvent<EventTarget>, value: string) => void;
    checked?: string;
    feil?: FeilProps;
}

export interface RadioPanelProps extends RadioProps {
    children?: React.ReactChildren;
    checked: boolean;
    name: string;
    onChange: (event: React.SyntheticEvent<EventTarget>) => void;
    inputProps?: React.InputHTMLAttributes<HTMLInputElement>;
}

export interface RadioPanelState {
    hasFocus: boolean;
}

export class RadioPanel extends React.Component<RadioPanelProps, RadioPanelState> {
    constructor(props: RadioPanelProps) {
        super(props);
        this.state = { hasFocus: false };
    }

    toggleOutline() {
        this.setState({ hasFocus: !this.state.hasFocus });
    }

    render() {
        const { checked, disabled, label, name, onChange, inputProps } = this.props;
        const { hasFocus } = this.state;

        const cls = classNames('inputPanel radioPanel', {
            'inputPanel--checked': checked === true && !disabled,
            'inputPanel--focused': hasFocus === true && !disabled,
            'inputPanel--disabled': disabled === true
        });

        const content = this.props.children ? (
            <div className="inputPanel__label">{this.props.children}</div>
        ) : (
            <span className="inputPanel__label">{label}</span>
        );

        return (
            <label className={cls}>
                <input
                    {...inputProps}
                    className="inputPanel__field"
                    type="radio"
                    name={name}
                    checked={checked}
                    disabled={disabled}
                    onFocus={() => this.toggleOutline()}
                    onBlur={() => this.toggleOutline()}
                    onChange={(event: React.SyntheticEvent<EventTarget>) => onChange(event)}
                />
                {content}
            </label>
        );
    }
}

class RadioPanelGruppe extends React.Component<RadioPanelGruppeProps> {
    render() {
        const { radios, name, legend, feil, checked, onChange } = this.props;
        return (
            <SkjemaGruppe className="inputPanelGruppe" feil={feil}>
                <Fieldset legend={legend}>
                    {radios.map((radio: RadioProps) => (
                        <RadioPanel
                            name={name}
                            key={`${name}-${radio.value}`}
                            checked={checked === radio.value}
                            onChange={(event: React.SyntheticEvent<EventTarget>) => onChange(event, radio.value)}
                            {...radio}
                        />
                    ))}
                </Fieldset>
            </SkjemaGruppe>
        );
    }
}

(RadioPanelGruppe as React.ComponentClass).propTypes = {
    radios: PT.array.isRequired,
    name: PT.string.isRequired,
    legend: PT.string.isRequired,
    onChange: PT.func.isRequired,
    feil: skjemaelementFeilmeldingShape
};

(RadioPanelGruppe as React.ComponentClass).defaultProps = {
    feil: undefined
};

export default RadioPanelGruppe;
