import PT from 'prop-types';
/* eslint-disable react/prefer-stateless-function  */
import React, { Component } from 'react';
import Modal from 'react-modal';
import classnames from 'classnames';
import Lukknapp from 'nav-frontend-lukknapp';
import 'nav-frontend-modal-style'; // eslint-disable-line import/extensions

const cls = (className) => classnames('modal', className);

/**
 * Modalen bruker `react-modal`, se [github siden](https://github.com/reactjs/react-modal) for mer informasjon.
 *
 */
class ModalWrapper extends Component {

    static setAppElement(element) {
        Modal.setAppElement(element);
    }

    constructor() {
        super();
        this.onRequestClose = this.onRequestClose.bind(this);
    }

    onRequestClose(evt) {
        const { onRequestClose, shouldCloseOnOverlayClick } = this.props;
        if (shouldCloseOnOverlayClick || evt.type === 'keydown') {
            onRequestClose();
        } else if (this.closeButtonRef) {
            this.closeButtonRef.focus();
        } else {
            this.modalRef.portal.refs.content.focus();
        }
    }

    render() {
        const { children, closeButton, shouldCloseOnOverlayClick, contentClass, ...props } = this.props;
        return (
            <Modal
                {...props}
                className={cls(props.className)}
                onRequestClose={this.onRequestClose}
                overlayClassName="modal__overlay"
                shouldCloseOnOverlayClick
                ref={(modalRef) => (this.modalRef = modalRef)}
            >
                <section className={contentClass}>
                    {children}
                </section>
                { closeButton &&
                    <Lukknapp
                        overstHjorne
                        className={classnames(shouldCloseOnOverlayClick || 'modal__lukkknapp--shake')}
                        onClick={props.onRequestClose}
                        ref={(closeButtonRef) => (this.closeButtonRef = closeButtonRef)}
                    >Lukk modal</Lukknapp>
                }
            </Modal>
        );
    }
}

ModalWrapper.propTypes = {
    /**
     * Bestemmer om modalen selv skal legge til en lukkeknapp
     */
    closeButton: PT.bool,
    /**
     * Bestemmer om modalen skal være synlig
     */
    isOpen: PT.bool.isRequired,
    /**
     * En beskrivelse av formålet med modalen, blir satt som `aria-label`
     */
    contentLabel: PT.string.isRequired,
    /**
     * Innholdet i modalen
     */
    children: PT.node.isRequired,
    /**
     * Funksjon som blir kalt når modalen har blitt åpnet. Kan brukes for å sette fokus på ett element
     */
    onAfterOpen: PT.func,
    /**
     * Funksjon som blir kalt i det modalen ønsker å lukkes
     */
    onRequestClose: PT.func.isRequired,
    /**
     * Om klikk på overlay skal lukke modalen
     */
    shouldCloseOnOverlayClick: PT.bool,
    /**
     * Tall som beskriver hvor lenge modalen venter før den lukkes
     */
    closeTimeoutMS: PT.number,
    /**
     * Klasse for content-taggen
     */
    contentClass: PT.string
};

ModalWrapper.defaultProps = {
    closeButton: true,
    shouldCloseOnOverlayClick: true,
    closeTimeoutMS: 0,
    contentClass: null,
    onAfterOpen: () => {}
};

export default ModalWrapper;
