import PT from 'prop-types';
import React, { Component } from 'react';
import classNames from 'classnames';
import { Normaltekst } from 'nav-frontend-typografi';
import 'nav-frontend-hjelpetekst-style'; // eslint-disable-line import/extensions
import Ikon from 'nav-frontend-ikoner-assets'; // eslint-disable-line import/extensions

function DefaultAnchor(props) {
    return (
        <Ikon
            kind={props.hover ? 'help-circle_hover' : 'help-circle'}
            className={props.className}
        />
    );
}

DefaultAnchor.propTypes = {
    className: PT.string.isRequired,
    hover: PT.bool.isRequired
};

const cls = (type, className) => classNames('hjelpetekst__tooltip', className, {
    'hjelpetekst__tooltip--over': type === 'over',
    'hjelpetekst__tooltip--under': type === 'under',
    'hjelpetekst__tooltip--hoyre': type === 'hoyre',
    'hjelpetekst__tooltip--venstre': type === 'venstre',
    'hjelpetekst__tooltip--midtstilt': type === 'midt'
});

class HjelpetekstBase extends Component {
    constructor(props) {
        super(props);

        this.toggleSynlighet = this.toggleSynlighet.bind(this);
        this.stateChange = this.stateChange.bind(this);

        this.state = {
            erSynlig: false,
            hover: false,
            focus: false,
            active: false,
            variant: 'over'
        };
    }

    componentWillUpdate(nextProps, nextState) {
        if (nextState.erSynlig && nextState.erSynlig !== this.state.erSynlig) {
            this.setVariant();
        }
    }

    setVariant() {
        const LIMIT = 330;
        const toggle = this.apneKnapp;
        if (toggle) {
            const rect = toggle.getBoundingClientRect();
            const right = window.innerWidth - rect.right;
            if (right < LIMIT) {
                if (right < LIMIT / 2) {
                    this.setState({
                        variant: 'venstre'
                    });
                } else {
                    this.setState({
                        variant: 'midt'
                    });
                }
            } else {
                this.setState({
                    variant: 'over'
                });
            }
        }
    }

    getAriaId() {
        return `tooltip-${this.props.id}`;
    }

    getVariant() {
        if (!this.props.type || this.props.type === 'auto') {
            return this.state.variant;
        }
        return this.props.type;
    }

    toggleSynlighet(event) {
        event.preventDefault();
        event.stopPropagation();
        this.setState({
            erSynlig: !this.state.erSynlig
        }, () => (this.state.erSynlig ? this.lukkeKnapp.focus() : this.apneKnapp.focus()));
    }

    stateChange(state, value) {
        return () => this.setState({ [state]: value });
    }

    renderContent() {
        return (
            <div
                tabIndex="-1"
                id={this.getAriaId()}
                role="tooltip"
                ref={(div) => { this.lukkeKnapp = div; }}
                className={cls(this.getVariant(), this.props.className)}
            >
                <div className="hjelpetekst__tekst">
                    <Normaltekst>
                        {this.props.children}
                    </Normaltekst>
                </div>
                <button
                    className="lukknapp lukknapp--hvit"
                    aria-controls={this.getAriaId()}
                    aria-label="Lukk hjelpetekst"
                    onClick={this.toggleSynlighet}
                >Lukk hjelpetekst</button>
            </div>
        );
    }

    render() {
        const Hjelpetekst = this.state.erSynlig ? this.renderContent() : null;
        const Anchor = this.props.anchor;
        const ariaId = this.getAriaId();

        return (
            <div className="hjelpetekst">
                <button
                    type="button"
                    ref={(button) => { this.apneKnapp = button; }}
                    className="hjelpetekst__apneknapp"
                    onClick={this.toggleSynlighet}
                    onMouseEnter={this.stateChange('hover', true)}
                    onMouseLeave={this.stateChange('hover', false)}
                    onFocus={this.stateChange('focus', true)}
                    onBlur={this.stateChange('focus', false)}
                    onMouseDown={this.stateChange('active', true)}
                    onMouseUp={this.stateChange('active', false)}
                    title={this.props.tittel}
                    aria-label={this.props.tittel}
                    aria-pressed={this.state.erSynlig}
                    aria-describedby={ariaId}
                >
                    <Anchor
                        className="hjelpetekst__anchor"
                        hover={this.state.hover}
                        focus={this.state.focus}
                        active={this.state.active}
                    />
                </button>
                {Hjelpetekst}
            </div>
        );
    }
}

HjelpetekstBase.propTypes = {
    children: PT.node.isRequired,
    type: PT.oneOf(['over', 'under', 'hoyre', 'venstre', 'auto']).isRequired,
    tittel: PT.string,
    className: PT.string,
    anchor: PT.func,
    id: PT.string.isRequired
};

HjelpetekstBase.defaultProps = {
    tittel: 'Hjelptekst',
    className: undefined,
    anchor: DefaultAnchor,
    id: 'undefined'
};

export default HjelpetekstBase;
