import PT from 'prop-types';
import React, { Component } from 'react';
import { EventThrottler, guid, autobind, requestAnimationFrame } from 'nav-frontend-js-utils';
import 'nav-frontend-skjema-style'; // eslint-disable-line import/extensions
import classNames from 'classnames';
import SkjemaelementFeilmelding, { skjemaelementFeilmeldingShape } from './skjemaelement-feilmelding';

const inputCls = (className, harFeil) => classNames(
    className,
    'skjemaelement__input textarea--medMeta',
    { 'skjemaelement__input--harFeil': harFeil }
);

/**
 * Selvekspanderende tekstområde med teller
 */
class Textarea extends Component {

    constructor(props) {
        super(props);
        autobind(this);
    }

    componentDidMount() {
        requestAnimationFrame(this.updateHeight, 0);
    }

    componentDidUpdate(prevProps) {
        if (prevProps.value !== this.props.value) {
            this.updateHeight();
        }
    }

    updateHeight() {
        if (this.mirror && this.tekstomrade) {
            this.mirror.textContent = `${this.tekstomrade.value} `;
            // eslint-disable-next-line no-param-reassign
            this.tekstomrade.style.height = `${this.mirror.offsetHeight + 25}px`;
        }
    }

    renderTextareaElement(textareaRef, textareaClass, feil, textareaId, other) {
        return (
            <textarea
                ref={(textarea) => {
                    this.tekstomrade = textarea;
                    if (textareaRef !== undefined) textareaRef(textarea);
                }}
                onChange={this.handleChange}
                className={inputCls(textareaClass, feil)}
                type="text"
                id={textareaId}
                style={{ height: '30px' }}
                {...other}
            />
        );
    }

    render() {
        const { label, maxLength, textareaClass, id, name, feil, tellerTekst, textareaRef, ...other } =
            this.props;
        const textareaId = id || name || guid();
        const antallTegn = other.value.length;
        const textareaEl = this.renderTextareaElement(textareaRef, textareaClass, feil, textareaId, other);

        return (
            <div className="skjemaelement textarea__container">
                <label className="skjemaelement__label" htmlFor={textareaId}>
                    {label}
                </label>
                <div className="textarea--medMeta__wrapper">
                    <EventThrottler event="resize" callback={this.updateHeight} delay={100}>
                        {textareaEl}
                    </EventThrottler>
                    <p className="textarea--medMeta__teller">
                        { tellerTekst(antallTegn || 0, maxLength) }
                    </p>
                </div>
                <SkjemaelementFeilmelding feil={feil} />
                <div
                    className="textareamirror"
                    ref={(mirror) => { this.mirror = mirror; }}
                    aria-hidden="true"
                />
            </div>
        );
    }
}

function defaultTellerTekst(antallTegn, maxLength) {
    const difference = antallTegn - maxLength;
    const remainingLetters = maxLength - antallTegn;
    const ariaAttrs = {};
    if (antallTegn > maxLength) {
        ariaAttrs['aria-live'] = 'assertive';
        return <span {...ariaAttrs}>Du har {difference} tegn for mye</span>;
    }
    if (remainingLetters === 5 || remainingLetters === 10 || remainingLetters === 0) {
        ariaAttrs['aria-live'] = 'polite';
    }
    return <span {...ariaAttrs}>Du har {remainingLetters} tegn igjen</span>;
}

Textarea.propTypes = {
    /**
     * Ledetekst for tekstområdet
     */
    label: PT.node.isRequired,
    /**
     * Maks antal tegn som kan skrives inn i tekstområdet
     */
    maxLength: PT.number,
    /**
     * Teksten som er skrevet inn i tekstområdet.
     */
    value: PT.string.isRequired,
    /**
     * Klassenavn for tekstomnrådet
     */
    textareaClass: PT.string,
    /**
     * Id for tekstområdet, settes til name eller random guid hvis prop ikke er satt
     */
    id: PT.string,
    /**
     * Navn for tekstområdet, settes til id eller random guid hvis prop ikke er satt
     */
    name: PT.string,
    /**
     * Optional onChange handler
     */
    onChange: PT.func.isRequired,
    /**
     * Hvis skjemaet har feil sender man inn et objekt med en feilmelding
     */
    feil: skjemaelementFeilmeldingShape,
    /**
     * Funksjon for å generere tellerteksten som vises nede i høyre hjørne
     */
    tellerTekst: PT.func,
    /**
     * Referanse til selve textareafeltet. Brukes for eksempel til å sette fokus
     */
    textareaRef: PT.func
};

Textarea.defaultProps = {
    maxLength: 2000,
    textareaClass: '',
    id: undefined,
    name: undefined,
    feil: undefined,
    tellerTekst: defaultTellerTekst,
    textareaRef: undefined
};

export default Textarea;
