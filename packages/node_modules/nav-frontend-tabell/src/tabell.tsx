import * as React from 'react';
import * as PT from 'prop-types';
import { Element, Normaltekst } from 'nav-frontend-typografi';
import * as classnames from 'classnames';
import 'nav-frontend-tabell-style';

interface NavTableContextInterface {
    columnWidths: number[];
}

const NavTableContext = React.createContext<NavTableContextInterface>({ columnWidths: [] });

export interface NavTabellProps {
    /**
     * Egendefinert klassenavn.
     */
    className?: string;
    children: any;
    /**
     * Relative kolonnebredder.
     */
    columnWidths: number[];
}

const NavTable: React.StatelessComponent<NavTabellProps> = ({ className, children, columnWidths }) => {
    const navTableContext: NavTableContextInterface = {
        columnWidths
    };
    return (
        <NavTableContext.Provider value={navTableContext}>
            <table className={classnames('nav-frontend-tabell', className)}>
                {children}
            </table>
        </NavTableContext.Provider>
    );
};

const NavTabellContextConsumer = NavTableContext.Consumer;

interface NavTableCellProps {
    children: any;
    align?: string;
    width?: string;
}

const HeadCell: React.StatelessComponent<NavTableCellProps> = ({ children, align, width }) => {
    const textAlign = align && align === 'right' ? 'right' : 'left';
    const cellWidth = (width ? width : '40%');
    return (
        <th className="nav_table_head_cell" style={{ textAlign, width: cellWidth }}>
            <Element>
                {children}
            </Element>
        </th>
    );
};

const adjustChildrenWidths = (navTableContext: NavTableContextInterface, children: any): React.ReactNode[] =>{
    const sum: number = navTableContext.columnWidths.reduce((a: number, b: number) => a + b);
    const columnWidthsInPercent: number[] = navTableContext.columnWidths.map((item: number) => {
        return (item / sum) * 100;
    });
    let index: number = -1;
    const widthAdjustedChildren = React.Children.map(children, (tableHeadCell: any) => {
        index = index + 1;
        return React.cloneElement(tableHeadCell, {
            width: columnWidthsInPercent[index] + '%'
        });
    });
    return widthAdjustedChildren;
};

const Head: React.StatelessComponent<{children: React.ReactNode[]}> = ({ children }) => {
    return (
        <NavTabellContextConsumer>
            { (navTableContext: NavTableContextInterface) => {
                const widthAdjustedChildren = adjustChildrenWidths(navTableContext, children);
                return (
                    <thead className="nav_table_head">
                        <tr className="nav_table_head_row" >
                            {widthAdjustedChildren}
                        </tr>
                    </thead>
                );
            } }
        </NavTabellContextConsumer>
    );
};

const SmallScreenHeader: React.StatelessComponent<{children: React.ReactNode[]}> = ({ children }) => {
    return (
        <thead className="nav_table_head-small-screen">
            <tr>
                <th className="nav_table_cell">
                    <Element>
                        {children}
                    </Element>
                </th>
            </tr>
        </thead>
    );
};

const Body: React.StatelessComponent<{children: any}> = ({ children }) => {
    return (
        <tbody className="nav_table_body">
            {children}
        </tbody>
    );
};

const Row: React.StatelessComponent<{children: any}> = ({ children }) => {
    return (
        <NavTabellContextConsumer>
            { (navTableContext: NavTableContextInterface) => {
                const widthAdjustedChildren = adjustChildrenWidths(navTableContext, children);
                return (
                    <tr className="nav_table_row">
                        {widthAdjustedChildren}
                    </tr>
                );
            } }
        </NavTabellContextConsumer>
    );
};

const Cell: React.StatelessComponent<NavTableCellProps> = ({ children, align, width }) => {
    const textAlign = align && align === 'right' ? 'right' : 'left';
    const cellWidth = (width ? width : '40%');
    return (
        <td className="nav_table_cell" style={{ textAlign, width: cellWidth }}>
            <Normaltekst>
                {children}
            </Normaltekst>
        </td>
    );
};

(NavTable as React.StatelessComponent).propTypes = {
    /**
     * Egendefinert klassenavn.
     */
    className: PT.string,
    children: PT.node.isRequired,
    columnWidths: PT.arrayOf(PT.number)
};

export {
    NavTable,
    Head,
    HeadCell,
    Body,
    Row,
    Cell,
    SmallScreenHeader
};
