import * as React from 'react';
import * as PT from 'prop-types';
import * as classNames from 'classnames';
import { Normaltekst } from 'nav-frontend-typografi';
import 'nav-frontend-hjelpetekst-style'; // eslint-disable-line import/extensions
import Ikon from 'nav-frontend-ikoner-assets'; // eslint-disable-line import/extensions

export interface DefaultAnchorProps {
	className?: string;
	hover?: boolean;
}

const DefaultAnchor: React.StatelessComponent<DefaultAnchorProps> = ({ className, hover }) => (
	<Ikon kind={hover ? 'help-circle_hover' : 'help-circle'} className={className} />
);

DefaultAnchor.propTypes = {
	className: PT.string.isRequired,
	hover: PT.bool.isRequired
};

const cls = (type, className) =>
	classNames('hjelpetekst__tooltip', className, {
		'hjelpetekst__tooltip--over': type === 'over',
		'hjelpetekst__tooltip--under': type === 'under',
		'hjelpetekst__tooltip--hoyre': type === 'hoyre',
		'hjelpetekst__tooltip--venstre': type === 'venstre',
		'hjelpetekst__tooltip--midtstilt': type === 'midt'
	});

export type Varianter = 'auto' | 'over' | 'under' | 'venstre' | 'midt' | 'hoyre';

export interface Props {
	id: string;
	children: React.ReactNode;
	className?: string;
	tittel?: string;
	type?: Varianter;
	anchor?: any;
}

export interface State {
	erSynlig: boolean;
	hover: boolean;
	focus: boolean;
	active: boolean;
	variant: Varianter;
}

class HjelpetekstBase extends React.Component<Props, State> {
	apneKnapp: HTMLButtonElement;
	lukkKnapp: HTMLButtonElement;
	hjelpetekstInnhold: HTMLElement;

	constructor(props) {
		super(props);

		this.toggleSynlighet = this.toggleSynlighet.bind(this);
		this.stateChange = this.stateChange.bind(this);
		this.toggleKeyListener = this.toggleKeyListener.bind(this);
		this.handleDocumentKeyDown = this.handleDocumentKeyDown.bind(this);
		this.renderContent = this.renderContent.bind(this);
		this.handleHjelpetekstBlur = this.handleHjelpetekstBlur.bind(this);

		this.state = {
			erSynlig: false,
			hover: false,
			focus: false,
			active: false,
			variant: 'over'
		};
	}

	componentWillUpdate(nextProps: Props, nextState: State) {
		if (nextState.erSynlig && nextState.erSynlig !== this.state.erSynlig) {
			this.setVariant();
		}
	}

	setVariant() {
		const LIMIT = 330;
		const toggle = this.apneKnapp;
		if (toggle) {
			const rect = toggle.getBoundingClientRect();
			const right = window.innerWidth - rect.right;
			if (right < LIMIT) {
				if (right < LIMIT / 2) {
					this.setState({
						variant: 'venstre'
					});
				} else {
					this.setState({
						variant: 'midt'
					});
				}
			} else {
				this.setState({
					variant: 'over'
				});
			}
		}
	}

	getAriaId() {
		return `tooltip-${this.props.id}`;
	}

	getVariant() {
		if (!this.props.type || this.props.type === 'auto') {
			return this.state.variant;
		}
		return this.props.type;
	}

	handleDocumentKeyDown(event) {
		if (event && event.key === 'Escape') {
			this.toggleSynlighet(event);
		}
	}

	handleHjelpetekstBlur(evt: any) {
		if (!this.state.erSynlig) {
			return;
		}
		window.setTimeout(() => {
			const focusElement = document.activeElement;
			if (
				focusElement === this.hjelpetekstInnhold ||
				focusElement === this.lukkKnapp ||
				focusElement === this.apneKnapp ||
				(this.hjelpetekstInnhold.contains && this.hjelpetekstInnhold.contains(focusElement))
			) {
				return;
			}
			this.setState({
				erSynlig: false
			});
		}, 0);
	}

	toggleSynlighet(event) {
		event.preventDefault();
		event.stopPropagation();
		const erSynlig = !this.state.erSynlig;
		this.setState(
			{
				erSynlig
			},
			() => (this.state.erSynlig ? this.hjelpetekstInnhold.focus() : this.apneKnapp.focus())
		);
		this.toggleKeyListener(erSynlig);
	}

	toggleKeyListener(erSynlig) {
		if (erSynlig) {
			document.addEventListener('keydown', this.handleDocumentKeyDown);
		} else {
			document.removeEventListener('keydown', this.handleDocumentKeyDown);
		}
	}

	stateChange(state, value) {
		return () => this.setState({ [state]: value });
	}

	renderContent() {
		return (
			<div
				onBlur={this.handleHjelpetekstBlur}
				tabIndex={-1}
				id={this.getAriaId()}
				role="tooltip"
				ref={(div: HTMLDivElement) => {
					this.hjelpetekstInnhold = div;
				}}
				className={cls(this.getVariant(), this.props.className)}
			>
				<div className="hjelpetekst__tekst">
					<Normaltekst>{this.props.children}</Normaltekst>
				</div>
				<button
					ref={(button: HTMLButtonElement) => {
						this.lukkKnapp = button;
					}}
					className="lukknapp lukknapp--hvit"
					aria-controls={this.getAriaId()}
					aria-label="Lukk hjelpetekst"
					onClick={this.toggleSynlighet}
				>
					Lukk hjelpetekst
				</button>
			</div>
		);
	}

	render() {
		const Hjelpetekst = this.state.erSynlig ? this.renderContent() : null;
		const Anchor = this.props.anchor;
		const ariaId = this.getAriaId();

		return (
			<div className="hjelpetekst">
				<button
					type="button"
					ref={(button: HTMLButtonElement) => {
						this.apneKnapp = button;
					}}
					className="hjelpetekst__apneknapp"
					onClick={this.toggleSynlighet}
					onMouseEnter={this.stateChange('hover', true)}
					onMouseLeave={this.stateChange('hover', false)}
					onFocus={this.stateChange('focus', true)}
					onBlur={(event) => {
						this.stateChange('focus', false);
						this.handleHjelpetekstBlur(event);
					}}
					onMouseDown={this.stateChange('active', true)}
					onMouseUp={this.stateChange('active', false)}
					title={this.props.tittel}
					aria-label={this.props.tittel}
					aria-pressed={this.state.erSynlig}
					aria-describedby={this.state.erSynlig ? ariaId : null}
				>
					<span className="sr-only">{this.props.tittel}</span>
					<Anchor
						className="hjelpetekst__anchor"
						hover={this.state.hover}
						focus={this.state.focus}
						active={this.state.active}
					/>
				</button>
				{Hjelpetekst}
			</div>
		);
	}
}

(HjelpetekstBase as any).propTypes = {
	children: PT.node.isRequired,
	type: PT.oneOf(['over', 'under', 'hoyre', 'venstre', 'auto']).isRequired,
	tittel: PT.string,
	className: PT.string,
	anchor: PT.func,
	id: PT.string.isRequired
};

(HjelpetekstBase as any).defaultProps = {
	tittel: 'Hjelptekst',
	className: undefined,
	anchor: DefaultAnchor,
	id: 'undefined'
};

export default HjelpetekstBase;

export { default as HjelpetekstOver } from './hjelpetekst-over';
export { default as HjelpetekstUnder } from './hjelpetekst-under';
export { default as HjelpetekstHoyre } from './hjelpetekst-hoyre';
export { default as HjelpetekstVenstre } from './hjelpetekst-venstre';
export { default as HjelpetekstMidt } from './hjelpetekst-midt';
export { default as HjelpetekstAuto } from './hjelpetekst-auto';
