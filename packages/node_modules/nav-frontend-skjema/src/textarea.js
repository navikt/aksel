import PT from 'prop-types';
import React, { Component } from 'react';
import { guid, autobind, omit } from 'nav-frontend-js-utils';
import 'nav-frontend-skjema-style'; // eslint-disable-line import/extensions
import classNames from 'classnames';

/**
 * Selvekspanderende tekstområde med teller
 */
class Textarea extends Component {

    constructor(props) {
        super(props);
        const initialValue = props.defaultValue || props.value || '';
        this.state = { antall: initialValue.length };
        autobind(this);
    }

    componentDidMount() {
        window.requestAnimationFrame = window.requestAnimationFrame || ((fn) => setTimeout(fn, 0));
        window.requestAnimationFrame(() => {
            if (this.tekstomrade) {
                this.tekstomrade.style.height = `${Math.max(this.tekstomrade.scrollHeight, 30) + 30}px`;
            }
        });
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.value !== nextProps.value) {
            const value = nextProps.value || '';
            this.setState({
                antall: value.length
            });
        }
    }

    componentDidUpdate(prevProps) {
        if (this.tekstomrade &&
            prevProps.value !== this.props.value &&
            document.activeElement !== this.tekstomrade) {
            this.tekstomrade.style.height = `${30}px`;
            this.tekstomrade.style.height = `${Math.max(this.tekstomrade.scrollHeight, 30) + 30}px`;
        }
    }

    handleChange(e) {
        /* eslint-disable no-param-reassign */
        e.target.style.height = `${30}px`;
        e.target.style.height = `${Math.max(this.tekstomrade.scrollHeight, 30) + 30}px`;
        /* eslint-enable */

        this.setState({
            antall: this.tekstomrade.value.length
        });

        if (this.props.onChange !== undefined) {
            this.props.onChange(e);
        }
    }

    render() {
        const { label, maxLength, textareaClass, id, name, feil, tellerTekst, textareaRef, ...other } = this.props;

        const domProps = omit(other, 'onChange');
        const textareaId = id || name || guid();
        const cls = (className) => classNames(className, 'skjemaelement__input textarea--medMeta');
        const skjemaElementClass = (harFeil) => classNames('skjemaelement', { 'skjemaelement--harFeil': harFeil });

        return (
            <div className={skjemaElementClass(!!feil)}>
                <label className="skjemaelement__label" htmlFor={id}>
                    {label}
                </label>
                <textarea
                    ref={(textarea) => {
                        this.tekstomrade = textarea;
                        if (textareaRef !== undefined) textareaRef(textarea);
                    }}
                    onChange={this.handleChange}
                    className={cls(textareaClass)}
                    type="text"
                    id={textareaId}
                    style={{ height: '30px' }}
                    {...domProps}
                />
                <p className="textarea--medMeta__teller">
                    { tellerTekst(this.state.antall, maxLength) }
                </p>
                <div role="alert" aria-live="assertive" className="skjemaelement__feilmelding">
                    {feil ? feil.feilmelding : null}
                </div>
            </div>
        );
    }
}

function defaultTellerTekst(antallTegn, maxLength) {
    if (antallTegn > maxLength) {
        return <span>Du har {antallTegn - maxLength} tegn for mye</span>;
    }
    return <span>Du har {maxLength - antallTegn} tegn igjen</span>;
}

Textarea.propTypes = {
    /**
     * Ledetekst for tekstområdet
     */
    label: PT.node.isRequired,
    /**
     * Maks antal tegn som kan skrives inn i tekstområdet
     */
    maxLength: PT.number,
    /**
     * Teksten som er skrevet inn i tekstområdet.
     */
    value: PT.string,
    /**
     * Verdi som er preutfyllt i tekstområdet.
     */
    defaultValue: PT.string,
    /**
     * Klassenavn for tekstomnrådet
     */
    textareaClass: PT.string,
    /**
     * Id for tekstområdet, settes til name eller random guid hvis prop ikke er satt
     */
    id: PT.string,
    /**
     * Navn for tekstområdet, settes til id eller random guid hvis prop ikke er satt
     */
    name: PT.string,
    /**
     * Optional onChange handler
     */
    onChange: PT.func,
    /**
     * Hvis skjemaet har feil sender man inn et objekt med en feilmelding
     */
    feil: PT.shape({
        feilmelding: PT.node.isRequired
    }),
    /**
     * Funksjon for å generere tellerteksten som vises nede i høyre hjørne
     */
    tellerTekst: PT.func,
    /**
     * Referanse til selve textareafeltet. Brukes for eksempel til å sette fokus
     */
    textareaRef: PT.func
};

Textarea.defaultProps = {
    maxLength: 2000,
    value: undefined,
    defaultValue: undefined,
    textareaClass: '',
    id: undefined,
    name: undefined,
    onChange: undefined,
    feil: undefined,
    tellerTekst: defaultTellerTekst,
    textareaRef: undefined
};


export default Textarea;
